pipeline {
    agent any
 environment {
        DOCKER_PASSWORD = credentials("docker_password")
        GITHUB_TOKEN = credentials("github_token")
    }

    stages {
        stage('Build & Test') {
            steps {
                sh './gradlew clean build'
            }
        }
            stage('Tag image') {
      steps {
        script {
            sh([script: 'git fetch --tag', returnStdout: true]).trim()
            env.MAJOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 1', returnStdout: true]).trim()
            env.MINOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 2', returnStdout: true]).trim()
            env.PATCH_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 3', returnStdout: true]).trim()
            env.IMAGE_TAG = "${env.MAJOR_VERSION}.\$((${env.MINOR_VERSION} + 1)).${env.PATCH_VERSION}"
            }
      }
}
        stage('Push image to docker.io') {
            steps {
                sh "docker build -t andreim166/hello-img:${env.IMAGE_TAG} ."
                sh "docker login docker.io -u ${DOCKER_PASSWORD_USR} -p ${DOCKER_PASSWORD_PSW}"
                sh "docker push andreim166/hello-img:${env.IMAGE_TAG}"

                sh "git tag ${env.IMAGE_TAG}"
                sh "git push https://$GITHUB_TOKEN@github.com/andreim16/service.git ${env.IMAGE_TAG}"
            }
        }
        stage('Install docker compose') {
            steps {
                sh '''
                    DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
                    mkdir -p $DOCKER_CONFIG/cli-plugins
                    curl -SL https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
                    chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
                '''
            }
        }
        stage('Run the image') {
            steps {
                sh "IMAGE_TAG=${env.IMAGE_TAG} docker compose up -d hello mongo"
            }
        }
    }

}
